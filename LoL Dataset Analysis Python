{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Glossary:\n",
    "==="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LoL = League of Legends\n",
    "\n",
    "Champions = Playable characters\n",
    "\n",
    "T1 = League of Legends esports team\n",
    "\n",
    "Faker = Legendary League of Legends player that plays for T1\n",
    "\n",
    "Role = Split into Top lane, Jungle, Mid Lane, ADC + Support(bottom lane)\n",
    "\n",
    "KDA = Kills Deaths and Assists(Calculated by Adding Kills and Deaths together then dividing by Deaths)\n",
    "\n",
    "Buffs = Making a character stronger\n",
    "\n",
    "Nerfs = Making a character weaker\n",
    "\n",
    "Rework = Redoing a character design(includes visual model and abilites)\n",
    "\n",
    "Yauso = League of Legends champion that I used to main(play a lot comapared to other champions)\n",
    "\n",
    "Often times, I will shorten a specific phrase to (Champion, Role) like (Singed Mid) or (Yasuo Top)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Section 1: Dataset\n",
    "=========="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I chose this dataset because the game Leage of Legends recently had a huge annual event, Worlds. It is basically a tournament bracket styled championship between multiple teams from many different regions all over the world and is considered to be the biggest esports event of the year from the biggest esport scene with a peak viewership of 6,941,610 viwers. I also used to enjoy playing league of legends myself in highschool and even though I may not play anymore, I still keep up with the esports scene, especially when it comes to the Korean region and Worlds because of my favorite team and player: T1 and Faker. So I decided to choose a dataset about League of Legends(abbreviated to LoL from now on) and more specifically about the champion pool(pool of playable characters in Lol)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Name</td>\n",
       "      <td>Class</td>\n",
       "      <td>Role</td>\n",
       "      <td>Tier</td>\n",
       "      <td>Score</td>\n",
       "      <td>Trend</td>\n",
       "      <td>Win %</td>\n",
       "      <td>Role %</td>\n",
       "      <td>Pick %</td>\n",
       "      <td>Ban %</td>\n",
       "      <td>KDA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aatrox</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>TOP</td>\n",
       "      <td>S</td>\n",
       "      <td>57.63</td>\n",
       "      <td>-31.86</td>\n",
       "      <td>47.68%</td>\n",
       "      <td>91.63%</td>\n",
       "      <td>6.62%</td>\n",
       "      <td>11.98%</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ahri</td>\n",
       "      <td>Mage</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>57.18</td>\n",
       "      <td>4.55</td>\n",
       "      <td>49.50%</td>\n",
       "      <td>94.65%</td>\n",
       "      <td>5.81%</td>\n",
       "      <td>1.73%</td>\n",
       "      <td>2.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>65.49</td>\n",
       "      <td>4.33</td>\n",
       "      <td>48.41%</td>\n",
       "      <td>75.74%</td>\n",
       "      <td>8.11%</td>\n",
       "      <td>13.02%</td>\n",
       "      <td>2.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>39.63</td>\n",
       "      <td>-1.51</td>\n",
       "      <td>45.92%</td>\n",
       "      <td>23.50%</td>\n",
       "      <td>2.55%</td>\n",
       "      <td>13.02%</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2934</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>Support</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>50.82</td>\n",
       "      <td>1.36</td>\n",
       "      <td>53.18%</td>\n",
       "      <td>13.26%</td>\n",
       "      <td>0.32%</td>\n",
       "      <td>0.87%</td>\n",
       "      <td>3.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2935</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>A</td>\n",
       "      <td>47.44</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>50.85%</td>\n",
       "      <td>82.90%</td>\n",
       "      <td>2.09%</td>\n",
       "      <td>0.87%</td>\n",
       "      <td>2.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2936</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>Mage</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>49.63</td>\n",
       "      <td>0.67</td>\n",
       "      <td>50.02%</td>\n",
       "      <td>86.88%</td>\n",
       "      <td>2.92%</td>\n",
       "      <td>1.99%</td>\n",
       "      <td>2.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2937</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>Mage</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>33.17</td>\n",
       "      <td>-3.59</td>\n",
       "      <td>47.67%</td>\n",
       "      <td>11.13%</td>\n",
       "      <td>0.36%</td>\n",
       "      <td>1.97%</td>\n",
       "      <td>2.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2938</th>\n",
       "      <td>Zyra</td>\n",
       "      <td>Mage</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>B</td>\n",
       "      <td>45.79</td>\n",
       "      <td>-1.82</td>\n",
       "      <td>50.15%</td>\n",
       "      <td>91.06%</td>\n",
       "      <td>3.00%</td>\n",
       "      <td>2.31%</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2939 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Name     Class     Role  Tier  ...   Role%   Pick%    Ban%   KDA\n",
       "0       Name     Class     Role  Tier  ...  Role %  Pick %   Ban %   KDA\n",
       "1     Aatrox   Fighter      TOP     S  ...  91.63%   6.62%  11.98%  1.77\n",
       "2       Ahri      Mage      MID     S  ...  94.65%   5.81%   1.73%  2.58\n",
       "3      Akali  Assassin      MID     S  ...  75.74%   8.11%  13.02%  2.37\n",
       "4      Akali  Assassin      TOP     C  ...  23.50%   2.55%  13.02%     2\n",
       "...      ...       ...      ...   ...  ...     ...     ...     ...   ...\n",
       "2934  Zilean   Support      MID     A  ...  13.26%   0.32%   0.87%  3.38\n",
       "2935  Zilean   Support  SUPPORT     A  ...  82.90%   2.09%   0.87%  2.93\n",
       "2936     Zoe      Mage      MID     A  ...  86.88%   2.92%   1.99%  2.59\n",
       "2937     Zoe      Mage  SUPPORT     D  ...  11.13%   0.36%   1.97%  2.13\n",
       "2938    Zyra      Mage  SUPPORT     B  ...  91.06%   3.00%   2.31%  2.08\n",
       "\n",
       "[2939 rows x 11 columns]"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "file_path = 'combined.csv'\n",
    "df = pd.read_csv(file_path, header=None, names=['Raw_Data'])\n",
    "df = df['Raw_Data'].str.split(';', expand=True)\n",
    "df.columns = ['Name', 'Class', 'Role', 'Tier', 'Score', 'Trend', 'Win%', 'Role%', 'Pick%', 'Ban%', 'KDA']\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2939"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "743"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[df['Role'] == 'MID'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "732"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[df['Role'] == 'TOP'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "310"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[df['Role'] == 'ADC'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "565"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[df['Role'] == 'SUPPORT'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>65.49</td>\n",
       "      <td>4.33</td>\n",
       "      <td>48.41%</td>\n",
       "      <td>75.74%</td>\n",
       "      <td>8.11%</td>\n",
       "      <td>13.02%</td>\n",
       "      <td>2.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>39.63</td>\n",
       "      <td>-1.51</td>\n",
       "      <td>45.92%</td>\n",
       "      <td>23.50%</td>\n",
       "      <td>2.55%</td>\n",
       "      <td>13.02%</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>50.57</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>48.03%</td>\n",
       "      <td>78.54%</td>\n",
       "      <td>4.72%</td>\n",
       "      <td>6.89%</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>D</td>\n",
       "      <td>31.65</td>\n",
       "      <td>-1.49</td>\n",
       "      <td>47.37%</td>\n",
       "      <td>20.31%</td>\n",
       "      <td>1.16%</td>\n",
       "      <td>7.33%</td>\n",
       "      <td>2.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>61.61</td>\n",
       "      <td>11.03</td>\n",
       "      <td>49.56%</td>\n",
       "      <td>80.23%</td>\n",
       "      <td>7.14%</td>\n",
       "      <td>7.97%</td>\n",
       "      <td>2.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>494</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>38.77</td>\n",
       "      <td>7.13</td>\n",
       "      <td>48.87%</td>\n",
       "      <td>18.73%</td>\n",
       "      <td>1.62%</td>\n",
       "      <td>7.97%</td>\n",
       "      <td>2.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>739</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>60.44</td>\n",
       "      <td>-1.17</td>\n",
       "      <td>48.67%</td>\n",
       "      <td>78.50%</td>\n",
       "      <td>6.74%</td>\n",
       "      <td>8.12%</td>\n",
       "      <td>2.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>740</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>36.94</td>\n",
       "      <td>-1.83</td>\n",
       "      <td>47.65%</td>\n",
       "      <td>20.40%</td>\n",
       "      <td>1.68%</td>\n",
       "      <td>8.12%</td>\n",
       "      <td>2.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>55.37</td>\n",
       "      <td>-5.08</td>\n",
       "      <td>48.18%</td>\n",
       "      <td>78.45%</td>\n",
       "      <td>5.99%</td>\n",
       "      <td>8.10%</td>\n",
       "      <td>2.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>36.35</td>\n",
       "      <td>-0.6</td>\n",
       "      <td>48.50%</td>\n",
       "      <td>20.39%</td>\n",
       "      <td>1.45%</td>\n",
       "      <td>8.10%</td>\n",
       "      <td>2.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1239</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>50.75</td>\n",
       "      <td>0</td>\n",
       "      <td>48.29%</td>\n",
       "      <td>71.88%</td>\n",
       "      <td>6.91%</td>\n",
       "      <td>11.01%</td>\n",
       "      <td>2.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1240</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>40.63</td>\n",
       "      <td>0</td>\n",
       "      <td>45.95%</td>\n",
       "      <td>27.15%</td>\n",
       "      <td>2.54%</td>\n",
       "      <td>11.01%</td>\n",
       "      <td>1.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1481</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>51.08</td>\n",
       "      <td>0.17</td>\n",
       "      <td>47.06%</td>\n",
       "      <td>74.23%</td>\n",
       "      <td>6.95%</td>\n",
       "      <td>10.72%</td>\n",
       "      <td>2.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1482</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>37.65</td>\n",
       "      <td>-3.32</td>\n",
       "      <td>46.09%</td>\n",
       "      <td>24.77%</td>\n",
       "      <td>2.27%</td>\n",
       "      <td>10.72%</td>\n",
       "      <td>1.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1721</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>52.27</td>\n",
       "      <td>1.2</td>\n",
       "      <td>47.11%</td>\n",
       "      <td>73.97%</td>\n",
       "      <td>6.22%</td>\n",
       "      <td>10.29%</td>\n",
       "      <td>2.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1722</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>D</td>\n",
       "      <td>35.28</td>\n",
       "      <td>-2.37</td>\n",
       "      <td>45.81%</td>\n",
       "      <td>24.91%</td>\n",
       "      <td>2.05%</td>\n",
       "      <td>10.29%</td>\n",
       "      <td>1.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>54.8</td>\n",
       "      <td>2.53</td>\n",
       "      <td>47.37%</td>\n",
       "      <td>73.01%</td>\n",
       "      <td>5.79%</td>\n",
       "      <td>9.72%</td>\n",
       "      <td>2.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1969</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>D</td>\n",
       "      <td>36.77</td>\n",
       "      <td>1.48</td>\n",
       "      <td>45.47%</td>\n",
       "      <td>25.88%</td>\n",
       "      <td>1.94%</td>\n",
       "      <td>9.72%</td>\n",
       "      <td>1.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2212</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>54.33</td>\n",
       "      <td>-0.47</td>\n",
       "      <td>47.81%</td>\n",
       "      <td>74.17%</td>\n",
       "      <td>5.58%</td>\n",
       "      <td>9.20%</td>\n",
       "      <td>2.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2213</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>38.97</td>\n",
       "      <td>2.21</td>\n",
       "      <td>46.41%</td>\n",
       "      <td>24.78%</td>\n",
       "      <td>1.83%</td>\n",
       "      <td>9.20%</td>\n",
       "      <td>1.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2453</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>53.28</td>\n",
       "      <td>-1.05</td>\n",
       "      <td>47.47%</td>\n",
       "      <td>73.95%</td>\n",
       "      <td>5.46%</td>\n",
       "      <td>8.92%</td>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2454</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>37.6</td>\n",
       "      <td>-1.37</td>\n",
       "      <td>47.63%</td>\n",
       "      <td>24.93%</td>\n",
       "      <td>1.76%</td>\n",
       "      <td>8.92%</td>\n",
       "      <td>1.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2696</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>50.82</td>\n",
       "      <td>-2.46</td>\n",
       "      <td>47.15%</td>\n",
       "      <td>73.91%</td>\n",
       "      <td>5.00%</td>\n",
       "      <td>8.34%</td>\n",
       "      <td>2.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2697</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>D</td>\n",
       "      <td>33.13</td>\n",
       "      <td>-4.46</td>\n",
       "      <td>47.08%</td>\n",
       "      <td>25.00%</td>\n",
       "      <td>1.69%</td>\n",
       "      <td>8.34%</td>\n",
       "      <td>1.96</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name     Class Role Tier  Score  ...    Win%   Role%  Pick%    Ban%   KDA\n",
       "3     Akali  Assassin  MID    S  65.49  ...  48.41%  75.74%  8.11%  13.02%  2.37\n",
       "4     Akali  Assassin  TOP    C  39.63  ...  45.92%  23.50%  2.55%  13.02%     2\n",
       "248   Akali  Assassin  MID    A  50.57  ...  48.03%  78.54%  4.72%   6.89%  2.26\n",
       "249   Akali  Assassin  TOP    D  31.65  ...  47.37%  20.31%  1.16%   7.33%  2.07\n",
       "493   Akali  Assassin  MID    S  61.61  ...  49.56%  80.23%  7.14%   7.97%  2.34\n",
       "494   Akali  Assassin  TOP    C  38.77  ...  48.87%  18.73%  1.62%   7.97%  2.11\n",
       "739   Akali  Assassin  MID    S  60.44  ...  48.67%  78.50%  6.74%   8.12%  2.29\n",
       "740   Akali  Assassin  TOP    C  36.94  ...  47.65%  20.40%  1.68%   8.12%  2.05\n",
       "991   Akali  Assassin  MID    A  55.37  ...  48.18%  78.45%  5.99%   8.10%   2.3\n",
       "992   Akali  Assassin  TOP    C  36.35  ...  48.50%  20.39%  1.45%   8.10%  2.06\n",
       "1239  Akali  Assassin  MID    A  50.75  ...  48.29%  71.88%  6.91%  11.01%  2.36\n",
       "1240  Akali  Assassin  TOP    C  40.63  ...  45.95%  27.15%  2.54%  11.01%  1.99\n",
       "1481  Akali  Assassin  MID    A  51.08  ...  47.06%  74.23%  6.95%  10.72%  2.32\n",
       "1482  Akali  Assassin  TOP    C  37.65  ...  46.09%  24.77%  2.27%  10.72%  1.99\n",
       "1721  Akali  Assassin  MID    A  52.27  ...  47.11%  73.97%  6.22%  10.29%  2.27\n",
       "1722  Akali  Assassin  TOP    D  35.28  ...  45.81%  24.91%  2.05%  10.29%  1.95\n",
       "1968  Akali  Assassin  MID    S   54.8  ...  47.37%  73.01%  5.79%   9.72%  2.27\n",
       "1969  Akali  Assassin  TOP    D  36.77  ...  45.47%  25.88%  1.94%   9.72%  1.96\n",
       "2212  Akali  Assassin  MID    A  54.33  ...  47.81%  74.17%  5.58%   9.20%  2.29\n",
       "2213  Akali  Assassin  TOP    C  38.97  ...  46.41%  24.78%  1.83%   9.20%  1.97\n",
       "2453  Akali  Assassin  MID    A  53.28  ...  47.47%  73.95%  5.46%   8.92%  2.28\n",
       "2454  Akali  Assassin  TOP    C   37.6  ...  47.63%  24.93%  1.76%   8.92%  1.94\n",
       "2696  Akali  Assassin  MID    A  50.82  ...  47.15%  73.91%  5.00%   8.34%  2.27\n",
       "2697  Akali  Assassin  TOP    D  33.13  ...  47.08%  25.00%  1.69%   8.34%  1.96\n",
       "\n",
       "[24 rows x 11 columns]"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Name'] == 'Akali']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Section 2: Exploratory Data Analysis\n",
    "===="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some descriptive statistics that can be very helpful are stuff like measures of center and measures of spread. Specifically because this kind of data breaks down champion winrates, pick rate, ban rate, etc. which is very helpful when identifying if a certain champion outperformed others in season 13 or if they were severely underwhelming to a certain extent where Riot Games should consider applying nerfs or buffs, or even get a rework."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Name</td>\n",
       "      <td>Class</td>\n",
       "      <td>Role</td>\n",
       "      <td>Tier</td>\n",
       "      <td>Score</td>\n",
       "      <td>Trend</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KDA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aatrox</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>TOP</td>\n",
       "      <td>S</td>\n",
       "      <td>57.63</td>\n",
       "      <td>-31.86</td>\n",
       "      <td>47.68</td>\n",
       "      <td>91.63</td>\n",
       "      <td>6.62</td>\n",
       "      <td>11.98</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ahri</td>\n",
       "      <td>Mage</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>57.18</td>\n",
       "      <td>4.55</td>\n",
       "      <td>49.50</td>\n",
       "      <td>94.65</td>\n",
       "      <td>5.81</td>\n",
       "      <td>1.73</td>\n",
       "      <td>2.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>65.49</td>\n",
       "      <td>4.33</td>\n",
       "      <td>48.41</td>\n",
       "      <td>75.74</td>\n",
       "      <td>8.11</td>\n",
       "      <td>13.02</td>\n",
       "      <td>2.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>39.63</td>\n",
       "      <td>-1.51</td>\n",
       "      <td>45.92</td>\n",
       "      <td>23.50</td>\n",
       "      <td>2.55</td>\n",
       "      <td>13.02</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2934</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>Support</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>50.82</td>\n",
       "      <td>1.36</td>\n",
       "      <td>53.18</td>\n",
       "      <td>13.26</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.87</td>\n",
       "      <td>3.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2935</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>A</td>\n",
       "      <td>47.44</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>50.85</td>\n",
       "      <td>82.90</td>\n",
       "      <td>2.09</td>\n",
       "      <td>0.87</td>\n",
       "      <td>2.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2936</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>Mage</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>49.63</td>\n",
       "      <td>0.67</td>\n",
       "      <td>50.02</td>\n",
       "      <td>86.88</td>\n",
       "      <td>2.92</td>\n",
       "      <td>1.99</td>\n",
       "      <td>2.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2937</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>Mage</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>33.17</td>\n",
       "      <td>-3.59</td>\n",
       "      <td>47.67</td>\n",
       "      <td>11.13</td>\n",
       "      <td>0.36</td>\n",
       "      <td>1.97</td>\n",
       "      <td>2.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2938</th>\n",
       "      <td>Zyra</td>\n",
       "      <td>Mage</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>B</td>\n",
       "      <td>45.79</td>\n",
       "      <td>-1.82</td>\n",
       "      <td>50.15</td>\n",
       "      <td>91.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>2.31</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2939 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Name     Class     Role  Tier  Score  ...   Win%  Role%  Pick%   Ban%   KDA\n",
       "0       Name     Class     Role  Tier  Score  ...    NaN    NaN    NaN    NaN   KDA\n",
       "1     Aatrox   Fighter      TOP     S  57.63  ...  47.68  91.63   6.62  11.98  1.77\n",
       "2       Ahri      Mage      MID     S  57.18  ...  49.50  94.65   5.81   1.73  2.58\n",
       "3      Akali  Assassin      MID     S  65.49  ...  48.41  75.74   8.11  13.02  2.37\n",
       "4      Akali  Assassin      TOP     C  39.63  ...  45.92  23.50   2.55  13.02     2\n",
       "...      ...       ...      ...   ...    ...  ...    ...    ...    ...    ...   ...\n",
       "2934  Zilean   Support      MID     A  50.82  ...  53.18  13.26   0.32   0.87  3.38\n",
       "2935  Zilean   Support  SUPPORT     A  47.44  ...  50.85  82.90   2.09   0.87  2.93\n",
       "2936     Zoe      Mage      MID     A  49.63  ...  50.02  86.88   2.92   1.99  2.59\n",
       "2937     Zoe      Mage  SUPPORT     D  33.17  ...  47.67  11.13   0.36   1.97  2.13\n",
       "2938    Zyra      Mage  SUPPORT     B  45.79  ...  50.15  91.06   3.00   2.31  2.08\n",
       "\n",
       "[2939 rows x 11 columns]"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percentage_columns = ['Win%', 'Role%', 'Pick%', 'Ban%']\n",
    "\n",
    "for col in percentage_columns:\n",
    "    df[col] = df[col].str.replace('%', '').str.strip()\n",
    "    df[col] = pd.to_numeric(df[col], errors='coerce')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aatrox</td>\n",
       "      <td>TOP</td>\n",
       "      <td>48.050833</td>\n",
       "      <td>92.094167</td>\n",
       "      <td>5.756667</td>\n",
       "      <td>5.793333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ahri</td>\n",
       "      <td>MID</td>\n",
       "      <td>50.895833</td>\n",
       "      <td>94.888333</td>\n",
       "      <td>9.962500</td>\n",
       "      <td>4.598333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Akali</td>\n",
       "      <td>MID</td>\n",
       "      <td>47.925833</td>\n",
       "      <td>75.548333</td>\n",
       "      <td>6.217500</td>\n",
       "      <td>9.358333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akali</td>\n",
       "      <td>TOP</td>\n",
       "      <td>46.895833</td>\n",
       "      <td>23.395833</td>\n",
       "      <td>1.878333</td>\n",
       "      <td>9.395000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akshan</td>\n",
       "      <td>MID</td>\n",
       "      <td>50.999167</td>\n",
       "      <td>67.075000</td>\n",
       "      <td>2.787500</td>\n",
       "      <td>5.108333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>MID</td>\n",
       "      <td>52.659167</td>\n",
       "      <td>13.565833</td>\n",
       "      <td>0.329167</td>\n",
       "      <td>0.851667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>50.286667</td>\n",
       "      <td>81.648333</td>\n",
       "      <td>2.089167</td>\n",
       "      <td>0.853333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>MID</td>\n",
       "      <td>49.862500</td>\n",
       "      <td>87.065833</td>\n",
       "      <td>3.062500</td>\n",
       "      <td>1.884167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>47.998333</td>\n",
       "      <td>10.950000</td>\n",
       "      <td>0.370833</td>\n",
       "      <td>1.852500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>Zyra</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>51.322500</td>\n",
       "      <td>91.134167</td>\n",
       "      <td>3.071667</td>\n",
       "      <td>2.016667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>271 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name     Role       Win%      Role%     Pick%      Ban%\n",
       "0    Aatrox      TOP  48.050833  92.094167  5.756667  5.793333\n",
       "1      Ahri      MID  50.895833  94.888333  9.962500  4.598333\n",
       "2     Akali      MID  47.925833  75.548333  6.217500  9.358333\n",
       "3     Akali      TOP  46.895833  23.395833  1.878333  9.395000\n",
       "4    Akshan      MID  50.999167  67.075000  2.787500  5.108333\n",
       "..      ...      ...        ...        ...       ...       ...\n",
       "266  Zilean      MID  52.659167  13.565833  0.329167  0.851667\n",
       "267  Zilean  SUPPORT  50.286667  81.648333  2.089167  0.853333\n",
       "268     Zoe      MID  49.862500  87.065833  3.062500  1.884167\n",
       "269     Zoe  SUPPORT  47.998333  10.950000  0.370833  1.852500\n",
       "270    Zyra  SUPPORT  51.322500  91.134167  3.071667  2.016667\n",
       "\n",
       "[271 rows x 6 columns]"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean = df.groupby(['Name', 'Role']).agg('mean', numeric_only=True).reset_index()\n",
    "mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aatrox</td>\n",
       "      <td>TOP</td>\n",
       "      <td>0.761248</td>\n",
       "      <td>0.459277</td>\n",
       "      <td>1.206199</td>\n",
       "      <td>2.054947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ahri</td>\n",
       "      <td>MID</td>\n",
       "      <td>0.613225</td>\n",
       "      <td>1.529729</td>\n",
       "      <td>2.182055</td>\n",
       "      <td>2.176778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Akali</td>\n",
       "      <td>MID</td>\n",
       "      <td>0.751610</td>\n",
       "      <td>2.685049</td>\n",
       "      <td>0.984481</td>\n",
       "      <td>1.689001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akali</td>\n",
       "      <td>TOP</td>\n",
       "      <td>1.119314</td>\n",
       "      <td>2.706929</td>\n",
       "      <td>0.419195</td>\n",
       "      <td>1.634439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akshan</td>\n",
       "      <td>MID</td>\n",
       "      <td>0.962038</td>\n",
       "      <td>2.050244</td>\n",
       "      <td>0.492528</td>\n",
       "      <td>1.787374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>MID</td>\n",
       "      <td>1.126955</td>\n",
       "      <td>0.850246</td>\n",
       "      <td>0.055671</td>\n",
       "      <td>0.217081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>0.524878</td>\n",
       "      <td>1.059286</td>\n",
       "      <td>0.240017</td>\n",
       "      <td>0.219393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>MID</td>\n",
       "      <td>0.662696</td>\n",
       "      <td>0.651982</td>\n",
       "      <td>0.166085</td>\n",
       "      <td>0.174432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>0.764732</td>\n",
       "      <td>0.737872</td>\n",
       "      <td>0.028110</td>\n",
       "      <td>0.165371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>Zyra</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>0.667739</td>\n",
       "      <td>0.652317</td>\n",
       "      <td>0.315100</td>\n",
       "      <td>0.157499</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>271 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name     Role      Win%     Role%     Pick%      Ban%\n",
       "0    Aatrox      TOP  0.761248  0.459277  1.206199  2.054947\n",
       "1      Ahri      MID  0.613225  1.529729  2.182055  2.176778\n",
       "2     Akali      MID  0.751610  2.685049  0.984481  1.689001\n",
       "3     Akali      TOP  1.119314  2.706929  0.419195  1.634439\n",
       "4    Akshan      MID  0.962038  2.050244  0.492528  1.787374\n",
       "..      ...      ...       ...       ...       ...       ...\n",
       "266  Zilean      MID  1.126955  0.850246  0.055671  0.217081\n",
       "267  Zilean  SUPPORT  0.524878  1.059286  0.240017  0.219393\n",
       "268     Zoe      MID  0.662696  0.651982  0.166085  0.174432\n",
       "269     Zoe  SUPPORT  0.764732  0.737872  0.028110  0.165371\n",
       "270    Zyra  SUPPORT  0.667739  0.652317  0.315100  0.157499\n",
       "\n",
       "[271 rows x 6 columns]"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std = df.groupby(['Name', 'Role']).agg('std', numeric_only=True).reset_index()\n",
    "std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aatrox</td>\n",
       "      <td>TOP</td>\n",
       "      <td>47.890</td>\n",
       "      <td>92.255</td>\n",
       "      <td>5.315</td>\n",
       "      <td>5.205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ahri</td>\n",
       "      <td>MID</td>\n",
       "      <td>51.100</td>\n",
       "      <td>95.290</td>\n",
       "      <td>10.455</td>\n",
       "      <td>4.335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Akali</td>\n",
       "      <td>MID</td>\n",
       "      <td>47.920</td>\n",
       "      <td>74.200</td>\n",
       "      <td>6.105</td>\n",
       "      <td>9.060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akali</td>\n",
       "      <td>TOP</td>\n",
       "      <td>46.745</td>\n",
       "      <td>24.775</td>\n",
       "      <td>1.795</td>\n",
       "      <td>9.060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akshan</td>\n",
       "      <td>MID</td>\n",
       "      <td>51.055</td>\n",
       "      <td>67.415</td>\n",
       "      <td>2.750</td>\n",
       "      <td>4.765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>MID</td>\n",
       "      <td>53.070</td>\n",
       "      <td>13.475</td>\n",
       "      <td>0.320</td>\n",
       "      <td>0.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>50.320</td>\n",
       "      <td>81.445</td>\n",
       "      <td>2.105</td>\n",
       "      <td>0.820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>MID</td>\n",
       "      <td>49.905</td>\n",
       "      <td>87.175</td>\n",
       "      <td>3.070</td>\n",
       "      <td>1.915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>47.875</td>\n",
       "      <td>10.840</td>\n",
       "      <td>0.370</td>\n",
       "      <td>1.895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>Zyra</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>51.200</td>\n",
       "      <td>91.330</td>\n",
       "      <td>3.060</td>\n",
       "      <td>1.995</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>271 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name     Role    Win%   Role%   Pick%   Ban%\n",
       "0    Aatrox      TOP  47.890  92.255   5.315  5.205\n",
       "1      Ahri      MID  51.100  95.290  10.455  4.335\n",
       "2     Akali      MID  47.920  74.200   6.105  9.060\n",
       "3     Akali      TOP  46.745  24.775   1.795  9.060\n",
       "4    Akshan      MID  51.055  67.415   2.750  4.765\n",
       "..      ...      ...     ...     ...     ...    ...\n",
       "266  Zilean      MID  53.070  13.475   0.320  0.815\n",
       "267  Zilean  SUPPORT  50.320  81.445   2.105  0.820\n",
       "268     Zoe      MID  49.905  87.175   3.070  1.915\n",
       "269     Zoe  SUPPORT  47.875  10.840   0.370  1.895\n",
       "270    Zyra  SUPPORT  51.200  91.330   3.060  1.995\n",
       "\n",
       "[271 rows x 6 columns]"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median = df.groupby(['Name', 'Role']).agg('median', numeric_only=True).reset_index()\n",
    "median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>Singed</td>\n",
       "      <td>MID</td>\n",
       "      <td>55.111818</td>\n",
       "      <td>15.021818</td>\n",
       "      <td>0.358182</td>\n",
       "      <td>0.520000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>Heimerdinger</td>\n",
       "      <td>ADC</td>\n",
       "      <td>54.690000</td>\n",
       "      <td>10.110000</td>\n",
       "      <td>0.260000</td>\n",
       "      <td>2.340000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>Swain</td>\n",
       "      <td>ADC</td>\n",
       "      <td>54.467500</td>\n",
       "      <td>11.085000</td>\n",
       "      <td>0.460000</td>\n",
       "      <td>2.975000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>Karthus</td>\n",
       "      <td>ADC</td>\n",
       "      <td>54.215000</td>\n",
       "      <td>27.427500</td>\n",
       "      <td>1.126667</td>\n",
       "      <td>3.155000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Kled</td>\n",
       "      <td>MID</td>\n",
       "      <td>53.743333</td>\n",
       "      <td>10.833333</td>\n",
       "      <td>0.296667</td>\n",
       "      <td>1.486667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>Seraphine</td>\n",
       "      <td>ADC</td>\n",
       "      <td>53.564167</td>\n",
       "      <td>20.883333</td>\n",
       "      <td>1.021667</td>\n",
       "      <td>1.212500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Nilah</td>\n",
       "      <td>ADC</td>\n",
       "      <td>53.274167</td>\n",
       "      <td>96.207500</td>\n",
       "      <td>2.854167</td>\n",
       "      <td>4.564167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>Rek'Sai</td>\n",
       "      <td>TOP</td>\n",
       "      <td>53.100000</td>\n",
       "      <td>14.530000</td>\n",
       "      <td>1.200000</td>\n",
       "      <td>17.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>Rell</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>52.740000</td>\n",
       "      <td>94.200833</td>\n",
       "      <td>2.690000</td>\n",
       "      <td>1.817500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>MID</td>\n",
       "      <td>52.659167</td>\n",
       "      <td>13.565833</td>\n",
       "      <td>0.329167</td>\n",
       "      <td>0.851667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Name     Role       Win%      Role%     Pick%       Ban%\n",
       "187        Singed      MID  55.111818  15.021818  0.358182   0.520000\n",
       "61   Heimerdinger      ADC  54.690000  10.110000  0.260000   2.340000\n",
       "196         Swain      ADC  54.467500  11.085000  0.460000   2.975000\n",
       "86        Karthus      ADC  54.215000  27.427500  1.126667   3.155000\n",
       "98           Kled      MID  53.743333  10.833333  0.296667   1.486667\n",
       "177     Seraphine      ADC  53.564167  20.883333  1.021667   1.212500\n",
       "137         Nilah      ADC  53.274167  96.207500  2.854167   4.564167\n",
       "159       Rek'Sai      TOP  53.100000  14.530000  1.200000  17.300000\n",
       "161          Rell  SUPPORT  52.740000  94.200833  2.690000   1.817500\n",
       "266        Zilean      MID  52.659167  13.565833  0.329167   0.851667"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean.nlargest(10, 'Win%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>Singed</td>\n",
       "      <td>MID</td>\n",
       "      <td>55.070</td>\n",
       "      <td>15.220</td>\n",
       "      <td>0.370</td>\n",
       "      <td>0.550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>Swain</td>\n",
       "      <td>ADC</td>\n",
       "      <td>54.880</td>\n",
       "      <td>10.950</td>\n",
       "      <td>0.440</td>\n",
       "      <td>2.970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>Heimerdinger</td>\n",
       "      <td>ADC</td>\n",
       "      <td>54.690</td>\n",
       "      <td>10.110</td>\n",
       "      <td>0.260</td>\n",
       "      <td>2.340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>Karthus</td>\n",
       "      <td>ADC</td>\n",
       "      <td>54.195</td>\n",
       "      <td>28.130</td>\n",
       "      <td>1.105</td>\n",
       "      <td>3.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Kled</td>\n",
       "      <td>MID</td>\n",
       "      <td>53.930</td>\n",
       "      <td>10.740</td>\n",
       "      <td>0.290</td>\n",
       "      <td>1.650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>Seraphine</td>\n",
       "      <td>ADC</td>\n",
       "      <td>53.465</td>\n",
       "      <td>21.440</td>\n",
       "      <td>1.025</td>\n",
       "      <td>1.240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>Nilah</td>\n",
       "      <td>ADC</td>\n",
       "      <td>53.235</td>\n",
       "      <td>96.320</td>\n",
       "      <td>2.760</td>\n",
       "      <td>4.715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>Rek'Sai</td>\n",
       "      <td>TOP</td>\n",
       "      <td>53.100</td>\n",
       "      <td>14.530</td>\n",
       "      <td>1.200</td>\n",
       "      <td>17.300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>MID</td>\n",
       "      <td>53.070</td>\n",
       "      <td>13.475</td>\n",
       "      <td>0.320</td>\n",
       "      <td>0.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>Quinn</td>\n",
       "      <td>MID</td>\n",
       "      <td>52.955</td>\n",
       "      <td>11.535</td>\n",
       "      <td>0.175</td>\n",
       "      <td>0.610</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Name Role    Win%   Role%  Pick%    Ban%\n",
       "187        Singed  MID  55.070  15.220  0.370   0.550\n",
       "196         Swain  ADC  54.880  10.950  0.440   2.970\n",
       "61   Heimerdinger  ADC  54.690  10.110  0.260   2.340\n",
       "86        Karthus  ADC  54.195  28.130  1.105   3.010\n",
       "98           Kled  MID  53.930  10.740  0.290   1.650\n",
       "177     Seraphine  ADC  53.465  21.440  1.025   1.240\n",
       "137         Nilah  ADC  53.235  96.320  2.760   4.715\n",
       "159       Rek'Sai  TOP  53.100  14.530  1.200  17.300\n",
       "266        Zilean  MID  53.070  13.475  0.320   0.815\n",
       "153         Quinn  MID  52.955  11.535  0.175   0.610"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median.nlargest(10, 'Win%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Ezreal</td>\n",
       "      <td>ADC</td>\n",
       "      <td>49.032500</td>\n",
       "      <td>92.580000</td>\n",
       "      <td>18.006667</td>\n",
       "      <td>4.925000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>Kai'Sa</td>\n",
       "      <td>ADC</td>\n",
       "      <td>50.315000</td>\n",
       "      <td>93.231667</td>\n",
       "      <td>17.282500</td>\n",
       "      <td>3.744167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>Jinx</td>\n",
       "      <td>ADC</td>\n",
       "      <td>50.722500</td>\n",
       "      <td>98.423333</td>\n",
       "      <td>15.516667</td>\n",
       "      <td>5.268333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>Jhin</td>\n",
       "      <td>ADC</td>\n",
       "      <td>50.942500</td>\n",
       "      <td>95.205833</td>\n",
       "      <td>14.544167</td>\n",
       "      <td>3.978333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>Thresh</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>50.227500</td>\n",
       "      <td>97.642500</td>\n",
       "      <td>14.141667</td>\n",
       "      <td>6.310833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Caitlyn</td>\n",
       "      <td>ADC</td>\n",
       "      <td>48.965833</td>\n",
       "      <td>94.982500</td>\n",
       "      <td>13.706667</td>\n",
       "      <td>12.342500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>Lee Sin</td>\n",
       "      <td>JUNGLE</td>\n",
       "      <td>48.468333</td>\n",
       "      <td>91.828333</td>\n",
       "      <td>13.319167</td>\n",
       "      <td>8.231667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>Milio</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>51.536250</td>\n",
       "      <td>98.991250</td>\n",
       "      <td>13.188750</td>\n",
       "      <td>21.231250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>MID</td>\n",
       "      <td>49.029167</td>\n",
       "      <td>71.576667</td>\n",
       "      <td>12.125000</td>\n",
       "      <td>18.873333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>Lux</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>50.114167</td>\n",
       "      <td>69.025833</td>\n",
       "      <td>12.026667</td>\n",
       "      <td>11.431667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Name     Role       Win%      Role%      Pick%       Ban%\n",
       "43    Ezreal      ADC  49.032500  92.580000  18.006667   4.925000\n",
       "81    Kai'Sa      ADC  50.315000  93.231667  17.282500   3.744167\n",
       "78      Jinx      ADC  50.722500  98.423333  15.516667   5.268333\n",
       "77      Jhin      ADC  50.942500  95.205833  14.544167   3.978333\n",
       "212   Thresh  SUPPORT  50.227500  97.642500  14.141667   6.310833\n",
       "25   Caitlyn      ADC  48.965833  94.982500  13.706667  12.342500\n",
       "103  Lee Sin   JUNGLE  48.468333  91.828333  13.319167   8.231667\n",
       "120    Milio  SUPPORT  51.536250  98.991250  13.188750  21.231250\n",
       "252    Yasuo      MID  49.029167  71.576667  12.125000  18.873333\n",
       "111      Lux  SUPPORT  50.114167  69.025833  12.026667  11.431667"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean.nlargest(10, 'Pick%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>ADC</td>\n",
       "      <td>50.605000</td>\n",
       "      <td>10.610000</td>\n",
       "      <td>1.670000</td>\n",
       "      <td>19.705000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>MID</td>\n",
       "      <td>49.029167</td>\n",
       "      <td>71.576667</td>\n",
       "      <td>12.125000</td>\n",
       "      <td>18.873333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>253</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>TOP</td>\n",
       "      <td>47.407500</td>\n",
       "      <td>17.310000</td>\n",
       "      <td>2.849167</td>\n",
       "      <td>18.873333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Name Role       Win%      Role%      Pick%       Ban%\n",
       "251  Yasuo  ADC  50.605000  10.610000   1.670000  19.705000\n",
       "252  Yasuo  MID  49.029167  71.576667  12.125000  18.873333\n",
       "253  Yasuo  TOP  47.407500  17.310000   2.849167  18.873333"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean[mean['Name'] == 'Yasuo']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Role</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>ADC</td>\n",
       "      <td>50.535</td>\n",
       "      <td>10.555</td>\n",
       "      <td>1.665</td>\n",
       "      <td>20.180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>MID</td>\n",
       "      <td>48.935</td>\n",
       "      <td>72.110</td>\n",
       "      <td>12.050</td>\n",
       "      <td>19.035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>253</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>TOP</td>\n",
       "      <td>47.460</td>\n",
       "      <td>17.090</td>\n",
       "      <td>2.820</td>\n",
       "      <td>19.035</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Name Role    Win%   Role%   Pick%    Ban%\n",
       "251  Yasuo  ADC  50.535  10.555   1.665  20.180\n",
       "252  Yasuo  MID  48.935  72.110  12.050  19.035\n",
       "253  Yasuo  TOP  47.460  17.090   2.820  19.035"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median[median['Name'] == 'Yasuo']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For measures of spread, it seems like using either the median or average values for analyzing the percentages for winning works. I am certain of this because when analyzing the differences between mean and median between the highest performing champions in their respective roles, it doesn't differ by much. However, this is because these are more niche/off-meta picks meaning they barely get played in that role which is apparent due to the low pick rates shown by both the median and average. I also grouped champions by their name and their respective roles which is why you may see duplicates of champion names. But this is because some champions are more flexible than others and could be played in multiple roles like the champion Yasuo(who is my main). You can see that although Yasuo is mostly played in the Mid role, he has signs of being played in other roles as well. Thanks to this, we can also see which role suits a character best or has the highest win rate in. Seeing that Yasuo's win rate is highest in the ADC role in both median and mean statistics, we can confidently say that Yasuo does the best in the ADC role compared to Mid and Top roles. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Section 3: Exploratory Data Visualization\n",
    "==="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>83.58</td>\n",
       "      <td>14.87</td>\n",
       "      <td>49.44</td>\n",
       "      <td>72.19</td>\n",
       "      <td>11.73</td>\n",
       "      <td>19.86</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>471</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>88.57</td>\n",
       "      <td>1.38</td>\n",
       "      <td>48.96</td>\n",
       "      <td>72.57</td>\n",
       "      <td>14.13</td>\n",
       "      <td>19.17</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>718</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>88.48</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>49.61</td>\n",
       "      <td>72.03</td>\n",
       "      <td>13.90</td>\n",
       "      <td>20.29</td>\n",
       "      <td>1.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>87.87</td>\n",
       "      <td>-0.61</td>\n",
       "      <td>48.70</td>\n",
       "      <td>70.73</td>\n",
       "      <td>12.60</td>\n",
       "      <td>20.50</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1217</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>85.15</td>\n",
       "      <td>-2.72</td>\n",
       "      <td>48.78</td>\n",
       "      <td>69.95</td>\n",
       "      <td>12.73</td>\n",
       "      <td>21.08</td>\n",
       "      <td>1.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>52.95</td>\n",
       "      <td>0</td>\n",
       "      <td>48.36</td>\n",
       "      <td>68.13</td>\n",
       "      <td>10.06</td>\n",
       "      <td>17.38</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1699</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>61.05</td>\n",
       "      <td>7.84</td>\n",
       "      <td>48.86</td>\n",
       "      <td>70.92</td>\n",
       "      <td>11.08</td>\n",
       "      <td>17.29</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1946</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>68.09</td>\n",
       "      <td>7.04</td>\n",
       "      <td>49.06</td>\n",
       "      <td>71.34</td>\n",
       "      <td>10.86</td>\n",
       "      <td>17.05</td>\n",
       "      <td>1.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2190</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>79.07</td>\n",
       "      <td>10.97</td>\n",
       "      <td>48.69</td>\n",
       "      <td>72.38</td>\n",
       "      <td>10.89</td>\n",
       "      <td>16.95</td>\n",
       "      <td>1.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2431</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>87.03</td>\n",
       "      <td>7.96</td>\n",
       "      <td>49.53</td>\n",
       "      <td>72.53</td>\n",
       "      <td>12.11</td>\n",
       "      <td>19.28</td>\n",
       "      <td>1.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2674</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>86.03</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>48.91</td>\n",
       "      <td>73.07</td>\n",
       "      <td>11.99</td>\n",
       "      <td>18.90</td>\n",
       "      <td>1.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2920</th>\n",
       "      <td>Yasuo</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>87.19</td>\n",
       "      <td>1.15</td>\n",
       "      <td>49.45</td>\n",
       "      <td>73.08</td>\n",
       "      <td>13.42</td>\n",
       "      <td>18.73</td>\n",
       "      <td>1.73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name    Class Role Tier  Score  Trend   Win%  Role%  Pick%   Ban%   KDA\n",
       "225   Yasuo  Fighter  MID  God  83.58  14.87  49.44  72.19  11.73  19.86  1.75\n",
       "471   Yasuo  Fighter  MID  God  88.57   1.38  48.96  72.57  14.13  19.17  1.72\n",
       "718   Yasuo  Fighter  MID  God  88.48  -0.08  49.61  72.03  13.90  20.29  1.76\n",
       "969   Yasuo  Fighter  MID  God  87.87  -0.61  48.70  70.73  12.60  20.50  1.77\n",
       "1217  Yasuo  Fighter  MID  God  85.15  -2.72  48.78  69.95  12.73  21.08  1.76\n",
       "1458  Yasuo  Fighter  MID    A  52.95      0  48.36  68.13  10.06  17.38  1.72\n",
       "1699  Yasuo  Fighter  MID    S  61.05   7.84  48.86  70.92  11.08  17.29  1.72\n",
       "1946  Yasuo  Fighter  MID  God  68.09   7.04  49.06  71.34  10.86  17.05  1.71\n",
       "2190  Yasuo  Fighter  MID  God  79.07  10.97  48.69  72.38  10.89  16.95   1.7\n",
       "2431  Yasuo  Fighter  MID  God  87.03   7.96  49.53  72.53  12.11  19.28  1.74\n",
       "2674  Yasuo  Fighter  MID  God  86.03  -0.99  48.91  73.07  11.99  18.90  1.71\n",
       "2920  Yasuo  Fighter  MID  God  87.19   1.15  49.45  73.08  13.42  18.73  1.73"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Yasuo = df[df['Name'] == 'Yasuo']\n",
    "Yasuo_mid = Yasuo[Yasuo['Role'] == 'MID']\n",
    "Yasuo_mid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Yasuo_mid['Win%'].plot.box(vert=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the most part, I am going to be using the Champion Yasuo as the primary example for most of these graphs. This box plot in particular is very helpful because we can easily identify the median and either the first or third quartiles, IQRs, outliers, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Champion Winrates'}, xlabel='Champion', ylabel='Winrate'>"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "median10 = median.nlargest(10, 'Win%').drop(columns=['Role%']).reset_index(drop=True)\n",
    "median10\n",
    "median10.plot.bar(title='Champion Winrates', xlabel='Champion', ylabel='Winrate', x='Name', rot=45)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This bar plot shows the 10 champions(regardless of role) with the highest median winrate's win%, pick%, and ban%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Champion Rates'}, xlabel='Champion', ylabel='Winrate'>"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mid10 = median[median['Role'] == 'MID'].nlargest(10, 'Win%').drop(columns=['Role%']).reset_index(drop=True)\n",
    "mid10\n",
    "mid10.plot.bar(title='Champion Rates', xlabel='Champion', ylabel='Winrate', x='Name', rot=45)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This graph is more specific to the mid role, showing the median win%, pick%, and ban% of champions in the Mid role. We can use the same process for other roles as well if needed later down the line."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Section 4: Planning for Part II\n",
    "==="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As someone who used to enjoy playing league of legends, I immediately noticed that a lot of the higher win rates in general and more specific roles. This includes niche picks, like Singed mid, that skew the data and don't help answer any questions because these champions in those roles are so rare that they shouldn't count. For Part II, I plan on looking for ways to ignore irrelvant champions in roles and focus solely on champions that do belong to that role, not as a niche pick like Singed or Kled in the Mid role for example. However, I could also be completely wrong and maybe not all niche picks are outliers and just a few of them are."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Section 5: Data Science\n",
    "==="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The question I'm going to answer is how do I exclude niche picks(which are equivalent to outliers in the context of the game and data set) when trying to use data to answer several other questions involving win rates, pick/ban rates, etc. I can use python to exclude such outliers/niche pickes by using the pick rate% while also implementing some important concepts learned in class like calculating quartiles our low outliers. I will also be using the correlation coeffecient to see if pick rates and win rates are inversely related via a simple linear regression model and use it to predict other data. Or, if I do end up being wrong about all niche picks being outliers and skewing the data, it would confirm that I was wrong and instead show that the data is fine as is and no further tweaking would be necessary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aatrox</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>TOP</td>\n",
       "      <td>S</td>\n",
       "      <td>57.63</td>\n",
       "      <td>-31.86</td>\n",
       "      <td>47.68</td>\n",
       "      <td>91.63</td>\n",
       "      <td>6.62</td>\n",
       "      <td>11.98</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ahri</td>\n",
       "      <td>Mage</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>57.18</td>\n",
       "      <td>4.55</td>\n",
       "      <td>49.50</td>\n",
       "      <td>94.65</td>\n",
       "      <td>5.81</td>\n",
       "      <td>1.73</td>\n",
       "      <td>2.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>MID</td>\n",
       "      <td>S</td>\n",
       "      <td>65.49</td>\n",
       "      <td>4.33</td>\n",
       "      <td>48.41</td>\n",
       "      <td>75.74</td>\n",
       "      <td>8.11</td>\n",
       "      <td>13.02</td>\n",
       "      <td>2.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Akali</td>\n",
       "      <td>Assassin</td>\n",
       "      <td>TOP</td>\n",
       "      <td>C</td>\n",
       "      <td>39.63</td>\n",
       "      <td>-1.51</td>\n",
       "      <td>45.92</td>\n",
       "      <td>23.50</td>\n",
       "      <td>2.55</td>\n",
       "      <td>13.02</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Akshan</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>49.39</td>\n",
       "      <td>0.34</td>\n",
       "      <td>51.62</td>\n",
       "      <td>66.03</td>\n",
       "      <td>2.75</td>\n",
       "      <td>3.79</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2934</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>Support</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>50.82</td>\n",
       "      <td>1.36</td>\n",
       "      <td>53.18</td>\n",
       "      <td>13.26</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.87</td>\n",
       "      <td>3.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2935</th>\n",
       "      <td>Zilean</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>A</td>\n",
       "      <td>47.44</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>50.85</td>\n",
       "      <td>82.90</td>\n",
       "      <td>2.09</td>\n",
       "      <td>0.87</td>\n",
       "      <td>2.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2936</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>Mage</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>49.63</td>\n",
       "      <td>0.67</td>\n",
       "      <td>50.02</td>\n",
       "      <td>86.88</td>\n",
       "      <td>2.92</td>\n",
       "      <td>1.99</td>\n",
       "      <td>2.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2937</th>\n",
       "      <td>Zoe</td>\n",
       "      <td>Mage</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>33.17</td>\n",
       "      <td>-3.59</td>\n",
       "      <td>47.67</td>\n",
       "      <td>11.13</td>\n",
       "      <td>0.36</td>\n",
       "      <td>1.97</td>\n",
       "      <td>2.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2938</th>\n",
       "      <td>Zyra</td>\n",
       "      <td>Mage</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>B</td>\n",
       "      <td>45.79</td>\n",
       "      <td>-1.82</td>\n",
       "      <td>50.15</td>\n",
       "      <td>91.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>2.31</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2927 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Name     Class     Role Tier  Score  ...   Win%  Role%  Pick%   Ban%   KDA\n",
       "1     Aatrox   Fighter      TOP    S  57.63  ...  47.68  91.63   6.62  11.98  1.77\n",
       "2       Ahri      Mage      MID    S  57.18  ...  49.50  94.65   5.81   1.73  2.58\n",
       "3      Akali  Assassin      MID    S  65.49  ...  48.41  75.74   8.11  13.02  2.37\n",
       "4      Akali  Assassin      TOP    C  39.63  ...  45.92  23.50   2.55  13.02     2\n",
       "5     Akshan  Marksman      MID    A  49.39  ...  51.62  66.03   2.75   3.79  2.26\n",
       "...      ...       ...      ...  ...    ...  ...    ...    ...    ...    ...   ...\n",
       "2934  Zilean   Support      MID    A  50.82  ...  53.18  13.26   0.32   0.87  3.38\n",
       "2935  Zilean   Support  SUPPORT    A  47.44  ...  50.85  82.90   2.09   0.87  2.93\n",
       "2936     Zoe      Mage      MID    A  49.63  ...  50.02  86.88   2.92   1.99  2.59\n",
       "2937     Zoe      Mage  SUPPORT    D  33.17  ...  47.67  11.13   0.36   1.97  2.13\n",
       "2938    Zyra      Mage  SUPPORT    B  45.79  ...  50.15  91.06   3.00   2.31  2.08\n",
       "\n",
       "[2927 rows x 11 columns]"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = df.drop(index=df.index[0])\n",
    "df_main = df1.dropna()\n",
    "df_main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-5 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-5 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-5 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-5 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-5 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "model = LinearRegression()\n",
    "ind = ['Pick%']\n",
    "dep = 'Win%'\n",
    "model.fit(df_main[ind], df_main[dep])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(50.21120579736136)"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.00483743])"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/junokwon/Library/Python/3.9/lib/python/site-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([50.21173791, 50.21275377, 50.21294727, 50.22131602, 50.22354124,\n",
       "       50.22571808, 50.23931125, 50.24134297, 50.31100193])"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict([[0.11], [0.32], [0.36], [2.09], [2.55], [3.00], [5.81], [6.23], [20.63]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2031</th>\n",
       "      <td>Ivern</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>30.37</td>\n",
       "      <td>-2.95</td>\n",
       "      <td>42.16</td>\n",
       "      <td>10.51</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.33</td>\n",
       "      <td>2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>310</th>\n",
       "      <td>Ivern</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>26.81</td>\n",
       "      <td>0.69</td>\n",
       "      <td>43.81</td>\n",
       "      <td>13.31</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.32</td>\n",
       "      <td>2.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1783</th>\n",
       "      <td>Ivern</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>33.32</td>\n",
       "      <td>8.54</td>\n",
       "      <td>44.62</td>\n",
       "      <td>10.41</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.33</td>\n",
       "      <td>2.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2274</th>\n",
       "      <td>Ivern</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>24.34</td>\n",
       "      <td>-6.03</td>\n",
       "      <td>43.29</td>\n",
       "      <td>11.27</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.33</td>\n",
       "      <td>2.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Ivern</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>25.15</td>\n",
       "      <td>-4.12</td>\n",
       "      <td>45.89</td>\n",
       "      <td>10.94</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.41</td>\n",
       "      <td>2.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>Skarner</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>TOP</td>\n",
       "      <td>D</td>\n",
       "      <td>32.07</td>\n",
       "      <td>5.34</td>\n",
       "      <td>50.23</td>\n",
       "      <td>18.10</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.15</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>665</th>\n",
       "      <td>Skarner</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>TOP</td>\n",
       "      <td>D</td>\n",
       "      <td>26.29</td>\n",
       "      <td>-5.78</td>\n",
       "      <td>48.07</td>\n",
       "      <td>20.42</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.15</td>\n",
       "      <td>2.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1161</th>\n",
       "      <td>Skarner</td>\n",
       "      <td>Fighter</td>\n",
       "      <td>TOP</td>\n",
       "      <td>D</td>\n",
       "      <td>30.61</td>\n",
       "      <td>2.28</td>\n",
       "      <td>49.34</td>\n",
       "      <td>16.44</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.18</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1543</th>\n",
       "      <td>Ivern</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>24.78</td>\n",
       "      <td>0.38</td>\n",
       "      <td>44.64</td>\n",
       "      <td>10.18</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.35</td>\n",
       "      <td>2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2758</th>\n",
       "      <td>Ivern</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>D</td>\n",
       "      <td>26.12</td>\n",
       "      <td>3.52</td>\n",
       "      <td>43.80</td>\n",
       "      <td>13.15</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.33</td>\n",
       "      <td>2.37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Name    Class     Role Tier  Score  ...   Win%  Role%  Pick%  Ban%   KDA\n",
       "2031    Ivern  Support  SUPPORT    D  30.37  ...  42.16  10.51   0.11  0.33  2.39\n",
       "310     Ivern  Support  SUPPORT    D  26.81  ...  43.81  13.31   0.13  0.32  2.36\n",
       "1783    Ivern  Support  SUPPORT    D  33.32  ...  44.62  10.41   0.13  0.33  2.36\n",
       "2274    Ivern  Support  SUPPORT    D  24.34  ...  43.29  11.27   0.13  0.33  2.46\n",
       "63      Ivern  Support  SUPPORT    D  25.15  ...  45.89  10.94   0.14  0.41  2.46\n",
       "419   Skarner  Fighter      TOP    D  32.07  ...  50.23  18.10   0.14  0.15  2.26\n",
       "665   Skarner  Fighter      TOP    D  26.29  ...  48.07  20.42   0.14  0.15  2.14\n",
       "1161  Skarner  Fighter      TOP    D  30.61  ...  49.34  16.44   0.14  0.18  2.21\n",
       "1543    Ivern  Support  SUPPORT    D  24.78  ...  44.64  10.18   0.14  0.35  2.39\n",
       "2758    Ivern  Support  SUPPORT    D  26.12  ...  43.80  13.15   0.14  0.33  2.37\n",
       "\n",
       "[10 rows x 11 columns]"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_main.nsmallest(10, 'Pick%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1064</th>\n",
       "      <td>Kai'Sa</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>92.98</td>\n",
       "      <td>3.24</td>\n",
       "      <td>51.40</td>\n",
       "      <td>91.68</td>\n",
       "      <td>28.67</td>\n",
       "      <td>11.96</td>\n",
       "      <td>2.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2524</th>\n",
       "      <td>Jinx</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>93.76</td>\n",
       "      <td>-0.57</td>\n",
       "      <td>51.91</td>\n",
       "      <td>98.87</td>\n",
       "      <td>25.32</td>\n",
       "      <td>12.98</td>\n",
       "      <td>2.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2076</th>\n",
       "      <td>Milio</td>\n",
       "      <td>Support</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>God</td>\n",
       "      <td>94.08</td>\n",
       "      <td>0</td>\n",
       "      <td>50.75</td>\n",
       "      <td>96.96</td>\n",
       "      <td>24.37</td>\n",
       "      <td>28.86</td>\n",
       "      <td>3.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2766</th>\n",
       "      <td>Jinx</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>91.93</td>\n",
       "      <td>-1.83</td>\n",
       "      <td>51.44</td>\n",
       "      <td>98.98</td>\n",
       "      <td>23.13</td>\n",
       "      <td>12.38</td>\n",
       "      <td>2.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2282</th>\n",
       "      <td>Jinx</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>94.32</td>\n",
       "      <td>0.69</td>\n",
       "      <td>52.05</td>\n",
       "      <td>98.84</td>\n",
       "      <td>23.11</td>\n",
       "      <td>8.78</td>\n",
       "      <td>2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1262</th>\n",
       "      <td>Caitlyn</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>92.85</td>\n",
       "      <td>0</td>\n",
       "      <td>49.91</td>\n",
       "      <td>93.92</td>\n",
       "      <td>21.58</td>\n",
       "      <td>21.06</td>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2039</th>\n",
       "      <td>Jinx</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>93.63</td>\n",
       "      <td>-0.7</td>\n",
       "      <td>51.65</td>\n",
       "      <td>98.94</td>\n",
       "      <td>21.54</td>\n",
       "      <td>5.91</td>\n",
       "      <td>2.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>Jinx</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>89.18</td>\n",
       "      <td>-2.75</td>\n",
       "      <td>50.51</td>\n",
       "      <td>98.66</td>\n",
       "      <td>21.26</td>\n",
       "      <td>10.24</td>\n",
       "      <td>2.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1254</th>\n",
       "      <td>Aurelion Sol</td>\n",
       "      <td>Mage</td>\n",
       "      <td>MID</td>\n",
       "      <td>God</td>\n",
       "      <td>92.92</td>\n",
       "      <td>0</td>\n",
       "      <td>51.16</td>\n",
       "      <td>81.74</td>\n",
       "      <td>21.06</td>\n",
       "      <td>51.38</td>\n",
       "      <td>2.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2492</th>\n",
       "      <td>Ezreal</td>\n",
       "      <td>Marksman</td>\n",
       "      <td>ADC</td>\n",
       "      <td>God</td>\n",
       "      <td>74.48</td>\n",
       "      <td>13.44</td>\n",
       "      <td>49.27</td>\n",
       "      <td>94.56</td>\n",
       "      <td>20.63</td>\n",
       "      <td>5.65</td>\n",
       "      <td>2.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Name     Class     Role Tier  ...  Role%  Pick%   Ban%   KDA\n",
       "1064        Kai'Sa  Marksman      ADC  God  ...  91.68  28.67  11.96  2.48\n",
       "2524          Jinx  Marksman      ADC  God  ...  98.87  25.32  12.98  2.37\n",
       "2076         Milio   Support  SUPPORT  God  ...  96.96  24.37  28.86  3.23\n",
       "2766          Jinx  Marksman      ADC  God  ...  98.98  23.13  12.38  2.35\n",
       "2282          Jinx  Marksman      ADC  God  ...  98.84  23.11   8.78  2.39\n",
       "1262       Caitlyn  Marksman      ADC  God  ...  93.92  21.58  21.06  2.28\n",
       "2039          Jinx  Marksman      ADC  God  ...  98.94  21.54   5.91  2.37\n",
       "318           Jinx  Marksman      ADC  God  ...  98.66  21.26  10.24  2.27\n",
       "1254  Aurelion Sol      Mage      MID  God  ...  81.74  21.06  51.38  2.54\n",
       "2492        Ezreal  Marksman      ADC  God  ...  94.56  20.63   5.65  2.44\n",
       "\n",
       "[10 rows x 11 columns]"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_main.nlargest(10, 'Pick%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Class</th>\n",
       "      <th>Role</th>\n",
       "      <th>Tier</th>\n",
       "      <th>Score</th>\n",
       "      <th>Trend</th>\n",
       "      <th>Win%</th>\n",
       "      <th>Role%</th>\n",
       "      <th>Pick%</th>\n",
       "      <th>Ban%</th>\n",
       "      <th>KDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>Karthus</td>\n",
       "      <td>Mage</td>\n",
       "      <td>ADC</td>\n",
       "      <td>B</td>\n",
       "      <td>44.84</td>\n",
       "      <td>4.15</td>\n",
       "      <td>56.96</td>\n",
       "      <td>30.11</td>\n",
       "      <td>1.13</td>\n",
       "      <td>4.09</td>\n",
       "      <td>2.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2134</th>\n",
       "      <td>Singed</td>\n",
       "      <td>Tank</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>52.33</td>\n",
       "      <td>0.08</td>\n",
       "      <td>56.33</td>\n",
       "      <td>16.16</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.57</td>\n",
       "      <td>2.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2860</th>\n",
       "      <td>Singed</td>\n",
       "      <td>Tank</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>53.14</td>\n",
       "      <td>3.3</td>\n",
       "      <td>56.14</td>\n",
       "      <td>11.94</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.44</td>\n",
       "      <td>2.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2871</th>\n",
       "      <td>Swain</td>\n",
       "      <td>Mage</td>\n",
       "      <td>ADC</td>\n",
       "      <td>A</td>\n",
       "      <td>47.53</td>\n",
       "      <td>6.55</td>\n",
       "      <td>56.01</td>\n",
       "      <td>12.32</td>\n",
       "      <td>0.59</td>\n",
       "      <td>3.07</td>\n",
       "      <td>3.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2374</th>\n",
       "      <td>Singed</td>\n",
       "      <td>Tank</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>51.41</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>55.82</td>\n",
       "      <td>15.17</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.55</td>\n",
       "      <td>2.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1164</th>\n",
       "      <td>Swain</td>\n",
       "      <td>Mage</td>\n",
       "      <td>ADC</td>\n",
       "      <td>A</td>\n",
       "      <td>50.89</td>\n",
       "      <td>0</td>\n",
       "      <td>55.50</td>\n",
       "      <td>11.54</td>\n",
       "      <td>0.51</td>\n",
       "      <td>2.91</td>\n",
       "      <td>2.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1249</th>\n",
       "      <td>Annie</td>\n",
       "      <td>Mage</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>God</td>\n",
       "      <td>75.81</td>\n",
       "      <td>0</td>\n",
       "      <td>55.49</td>\n",
       "      <td>49.57</td>\n",
       "      <td>6.79</td>\n",
       "      <td>17.44</td>\n",
       "      <td>2.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405</th>\n",
       "      <td>Seraphine</td>\n",
       "      <td>Mage</td>\n",
       "      <td>ADC</td>\n",
       "      <td>B</td>\n",
       "      <td>44.83</td>\n",
       "      <td>6.21</td>\n",
       "      <td>55.48</td>\n",
       "      <td>16.85</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.03</td>\n",
       "      <td>2.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1642</th>\n",
       "      <td>Singed</td>\n",
       "      <td>Tank</td>\n",
       "      <td>MID</td>\n",
       "      <td>A</td>\n",
       "      <td>53.96</td>\n",
       "      <td>-0.41</td>\n",
       "      <td>55.38</td>\n",
       "      <td>20.18</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.60</td>\n",
       "      <td>2.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>Rell</td>\n",
       "      <td>Tank</td>\n",
       "      <td>SUPPORT</td>\n",
       "      <td>S</td>\n",
       "      <td>69.1</td>\n",
       "      <td>14.68</td>\n",
       "      <td>55.31</td>\n",
       "      <td>90.18</td>\n",
       "      <td>6.23</td>\n",
       "      <td>4.40</td>\n",
       "      <td>3.07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Name Class     Role Tier  Score  ...   Win%  Role%  Pick%   Ban%   KDA\n",
       "325     Karthus  Mage      ADC    B  44.84  ...  56.96  30.11   1.13   4.09  2.34\n",
       "2134     Singed  Tank      MID    A  52.33  ...  56.33  16.16   0.43   0.57  2.89\n",
       "2860     Singed  Tank      MID    A  53.14  ...  56.14  11.94   0.26   0.44  2.85\n",
       "2871      Swain  Mage      ADC    A  47.53  ...  56.01  12.32   0.59   3.07  3.07\n",
       "2374     Singed  Tank      MID    A  51.41  ...  55.82  15.17   0.37   0.55   2.9\n",
       "1164      Swain  Mage      ADC    A  50.89  ...  55.50  11.54   0.51   2.91  2.98\n",
       "1249      Annie  Mage  SUPPORT  God  75.81  ...  55.49  49.57   6.79  17.44  2.74\n",
       "405   Seraphine  Mage      ADC    B  44.83  ...  55.48  16.85   0.75   1.03  2.95\n",
       "1642     Singed  Tank      MID    A  53.96  ...  55.38  20.18   0.47   0.60  2.88\n",
       "884        Rell  Tank  SUPPORT    S   69.1  ...  55.31  90.18   6.23   4.40  3.07\n",
       "\n",
       "[10 rows x 11 columns]"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_main.nlargest(10, 'Win%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that I was initially wrong and that not all niche picks(picks with low pick rates for a role) are to be considered outliers in the data set and does not mess with data and the analysis of it. This means that I don't have to clean up the data any further and can finally analyze the data and make conclusions based on the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Section 6: A Different Data Visualization\n",
    "==="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "sns.lmplot(x='Pick%', y='Win%', data=df_main)\n",
    "plt.title('Pick% vs Win%')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(0.009576248666551636)"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_main['Pick%'].corr(df_main['Win%'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Pick% vs Win%'}, xlabel='Pick%', ylabel='Win%'>"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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8OWXXwp79uwRxo0bJ4wbN87AUfsGuWt35MgR4amnnhL27NkjHDt2TPj444+FtLQ0YdKkSQaP3HiPPfaYsHXrVuHYsWPCt99+Kzz22GOCyWQSNm3aJAiCfr9zDHRUWrFihdC3b1+hS5cuwpgxY4SdO3caPSSfN3v2bKFXr15Cly5dhN69ewuzZ88Wjhw5YvSwfFJubq4AwOXP3LlzBUFoP2L+hz/8QejRo4cQFhYmXHXVVcKhQ4eMHbSPcHftGhoahGuuuUYwm81CaGiokJKSItx55538kHKR2HUDIKxevdr2mPPnzwu//e1vhbi4OCEiIkK48cYbhTNnzhg3aB8hd+1OnjwpTJo0SejevbsQFhYmpKenC4888ohQU1Nj7MB9wK9//WshJSVF6NKli2A2m4WrrrrKFuQIgn6/cyZBEASNK0xEREREPo05OkRERBSwGOgQERFRwGKgQ0RERAGLgQ4REREFLAY6REREFLAY6BAREVHAYqBDREREAYuBDhH5lNtvvx033HCDosceP34cJpPJVlKfiMgZAx0i6nC33347TCYTTCaTranfU089hZaWFrz00ktYs2aNbu/10EMPoXv37khOTsZbb73lcN/777+Pa6+9Vrf3IiLfE2L0AIioc5oxYwZWr16NxsZG/O9//8OCBQsQGhqKxYsX6/Ye//3vf/H2229j06ZNKCoqwq9//WtMnz4dCQkJqKmpweOPP47PP/9ct/cjIt/DFR0iMkRYWBh69uyJlJQU3HPPPZg2bRo2btzosnXV1taG559/Hunp6QgLC0Pfvn3x7LPPir5ma2srfv3rX2PQoEE4efIkvv/+e0yePBmXX345cnJyEB0djWPHjgEAHn30Udxzzz3o27dvR3y7RGQQrugQkU/o2rUrKioqXG5fvHgx3njjDbz44ouYMGECzpw5gx9++MHlcY2NjcjJycHx48fx9ddfw2w2Y8SIEfjHP/6BqqoqFBcX4/z580hPT0deXh4KCgrwyiuvdMS3RkQGYqBDRIYSBAFffPEF/u///g8LFy5EeXm57b7a2lq89NJLePnllzF37lwAQP/+/TFhwgSH16irq8OsWbPQ2NiI3NxcxMTEAACmT5+O2267DVlZWejatSvWrl2LyMhI3HPPPVizZg1effVVrFixAgkJCfjHP/6BoUOHdtw3TkQdgltXRGSITz75BFFRUQgPD8fMmTMxe/ZsLF261OEx33//PRobG3HVVVe5fa2cnBzU19dj06ZNtiDHaunSpThy5AgOHDiAG2+8EcuWLcO0adMQGhqKZ555Bnl5ebjjjjswZ84cvb9FIvIBDHSIyBBTpkzB/v37UVRUhPPnz9tWW+x17dpV0Wv95Cc/wbfffosdO3a4fdwPP/yAf//733j66aexZcsWTJo0CWazGbfccgsKCgpQW1ur+fshIt/EQIeIDBEZGYn09HT07dsXISHiu+gZGRno2rUrvvjiC7evdc899+C5557Dddddh61bt4o+RhAE3HXXXfjrX/+KqKgotLa2orm5GQBs/21tbfXgOyIiX8QcHSLyWeHh4fjd736HRx99FF26dMH48eNRXl6OgwcPYv78+Q6PXbhwIVpbW/HTn/4Un376qUsez5tvvgmz2WyrmzN+/HgsXboUO3fuxKeffoohQ4YgNja2o741IuogDHSIyKf94Q9/QEhICP74xz+itLQUvXr1wt133y362AceeABtbW34yU9+gs8++wzZ2dkAgB9//BHPPvsstm/fbnvsmDFj8PDDD2PWrFlITEzE2rVrO+T7IaKOZRIEQTB6EERERETewBwdIiIiClgMdIiIiChgMdAhIiKigMVAh4iIiAIWAx0iIiIKWAx0iIiIKGAx0CEiIqKAxUCHiIiIAhYDHSIiIgpYDHSIiIgoYDHQISIiooDFQIeIiIgC1v8HU2gxV5j2LdYAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_main.plot.scatter(x='Pick%', y='Win%', title='Pick% vs Win%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Section 7: Overall Summary\n",
    "==="
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When first heading into this project, I thought that this dataset was already cleaned up and organized. But as I went through it in section 1 and 2, I noticed strange pieces of data that looked out of place. This is what I mentioned in section 4 and 5 of characters being played outside of their usual roles as niche picks yet achieve overwhelming success which was displayed by their high winrate compared to other champions of that role. For example, Singed mid had a super high win rate of 55% which goes to show that he often dominated mid lane despite belonging to the top lane role. However for the mid role, he had a pick rate of just 0.3%. This made this data look like an outlier which would skew any conclusions made about this data if I made an analysis so I had to check if it was a piece of data that should be excluded or not. This also made me think that other champions played as niche picks outside of their roles would all be outliers and make it difficult to come to a sound conclusion so I used a linear regression model to see if there was a relationship between pick rate and win rate. Contrary to my expectations and original hypothesis, the correlation coeffecient was so miniscule that there was hardly a relationship between the pick rate and win rate which meant the data was fine as is. This basically gives me the signal to go ahead and make any final conclusions with the data as is because the data that I originally thought of as outliers were just rare cases but nothing too outside my expectations. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
